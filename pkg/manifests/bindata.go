// Code generated by go-bindata.
// sources:
// jsonnet/manifests/ceph-prometheus-rules.yaml
// jsonnet/manifests/gluster-prometheus-rules.yaml
// DO NOT EDIT!

package manifests

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsonnetManifestsCephPrometheusRulesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x97\xdf\x6f\xdb\x36\x10\xc7\xdf\xf3\x57\x1c\x84\x16\xb0\x37\x5b\xb5\x33\x04\x48\x85\xa5\xc0\x90\x74\x7b\xd9\xb2\x2c\xe9\xb6\x47\x81\x26\x2f\x16\x6b\x8a\xa7\x92\x27\x3b\x6e\xe6\xff\x7d\xa0\xa4\xd8\x72\xd0\x34\x72\xec\xee\x65\x79\xb2\x44\xde\x8f\x7c\x3f\xc7\xe3\x49\x14\xfa\x2f\x74\x5e\x93\x4d\x20\x27\xab\x99\x9c\xb6\xd3\x58\x92\x43\xf2\xb1\xa4\xfc\xcd\x7c\x7c\x34\xd3\x56\x25\x70\xe5\x28\x47\xce\xb0\xf4\xd7\xa5\xc1\xa3\x1c\x59\x28\xc1\x22\x39\x02\x30\x62\x82\xc6\x87\x5f\x00\xc5\x7a\x5b\x02\xb3\x53\x5f\xbd\x73\x64\x30\x01\x61\xd0\xf1\xd0\x95\x06\xc3\x5b\x2b\x72\x4c\x5a\xbb\x87\x12\x8b\x6c\x6b\xd5\x17\x42\x62\x02\x0a\x6f\x45\x69\xf8\xc8\x17\x28\x43\x88\xa9\xa3\xb2\xa8\x82\x0d\x1b\x27\x9f\x4a\x72\x65\x3e\xac\xfc\xc7\x0f\x1e\x00\xaa\x5f\x75\x52\xc3\x3a\x78\x02\xe7\x58\x64\xbf\x91\xfd\xa3\xb2\xf8\x89\xaf\xb5\x9f\x55\x1b\x00\x84\xb5\xc4\x82\x35\xd9\xc6\x26\xfc\x29\xf4\xd2\xe9\x82\x2b\x7d\x6e\x98\x9c\x98\x22\x48\x53\x7a\x46\xd7\x84\x05\xed\xc1\xd0\x22\x86\x73\xb2\x2c\x24\xc3\x4d\x59\x14\xe4\x38\x5e\x3b\xc9\xd1\x7b\x31\xc5\x8d\x83\xc6\x50\x30\xb8\x4d\x7c\x00\x8f\x73\x74\x9a\x97\xa9\xc1\x39\x9a\x04\xd0\x39\x72\x9b\xd5\xda\x38\xe5\x65\x81\x09\x04\xb1\x9a\x25\xbc\x2b\x5c\x02\xff\xac\x37\x4a\x2a\x2d\xf7\xc2\x86\x34\x27\x9b\xd6\xc1\x52\xcf\x82\x4b\x0f\x67\x67\x30\xee\xc3\x8f\x67\xd0\xeb\x3d\xda\xf7\xc0\xb3\x0f\xaf\xe1\xb8\x0f\xdf\xc3\xb8\xdf\xb8\xbc\x25\x97\xc0\xf8\x24\x6f\x1e\xdb\xb0\xdb\x69\x27\x20\x9d\x66\x2d\x85\x69\xa1\xa9\xa0\x5a\x52\xd8\x99\xce\x25\x29\xbc\xa0\x85\xdd\x19\x4b\x88\x02\xf7\xf7\xf0\xaa\x4e\x30\xae\x9e\x57\x2b\x58\xa0\x65\x50\xb4\xb0\x31\x5c\x19\x14\x1e\x41\x66\x28\x67\xc0\x59\x6d\xb3\xf6\x0a\xa0\xf3\x1c\x95\x16\x8c\x66\xf9\x15\x7c\xcf\x06\x3a\x38\xd1\xba\xe0\x92\x8a\x55\x88\x96\x86\x28\xc9\x47\xd2\x36\x9d\x95\x13\x6c\x73\xfa\x61\xe4\x5f\xc2\x89\xbc\xea\x4c\xe8\xf7\x9b\x8b\x0b\xed\x67\x97\xc4\xd7\xe8\x0b\xb2\x4a\xdb\x69\x67\x5a\xc1\x12\x14\xce\xb5\xdc\xd2\xb0\x79\xb3\x5a\x81\x25\x06\xb7\xf6\x3b\x00\xb2\x90\x91\xe7\xf6\xe6\xf0\xdc\xa2\xb6\x5a\x7d\x01\x56\x15\x67\xdb\xd7\xa1\xb1\x54\xd9\xa4\x0e\x0b\x23\x24\xf6\xea\x93\x44\x5e\xa5\xda\x56\xc7\x0c\x84\x55\xb0\x7e\x59\x16\xe1\xe5\xa8\x3f\x88\x94\xf6\xb3\x68\x10\xbd\x1a\x47\x83\xa8\x5a\x56\x02\x73\xb2\xd1\x20\x22\xaf\xe2\x5e\xfc\x5d\x3f\x0a\xc7\x8f\x6c\xaf\xb5\xda\xaf\xdb\x5e\x6a\xf0\x96\x7b\xe1\xff\x1f\x34\x22\xf6\x1f\xa5\x51\xdb\x68\x3f\x4b\x49\xca\xb2\xa8\x58\x0c\xa2\x60\xf1\x10\x13\xef\x42\x7b\xc2\x90\xa7\x67\x61\x25\x46\x83\xa8\x8e\xba\x75\xde\x77\x3a\xee\x5f\xae\x90\x3f\xad\x98\x0b\x6d\xc4\xc4\xe0\x61\xeb\x43\x48\x89\xde\xeb\x89\xc1\xbd\xcb\x63\xe3\xea\xbf\x2d\x8f\xd1\xff\xb8\x3c\x2e\x04\x8b\x6b\x94\x34\x47\xb7\xfc\x20\x66\xda\x4e\x3f\x10\xfd\x4a\xbb\x74\x11\xc1\x02\x5c\xe3\x02\x32\xe1\x61\x82\x68\x41\x48\xd6\x73\x0c\x19\x42\x4e\x0e\x81\x33\x61\xe1\x38\xeb\x72\x37\x6f\x7b\xd4\x1e\xbc\xa1\xc5\x93\x25\xb1\x10\xce\x6e\x75\x94\xce\xad\x3c\xe8\x5f\x4c\xd3\xd2\xaa\x30\x76\x7d\x46\x05\xef\x60\xd4\x56\xf6\x38\x7b\x56\xd9\x76\xf4\x2d\x61\xaf\x7e\xb9\xc6\x42\x68\xf7\x32\x51\x6f\xd0\xdc\x42\x86\xc2\x00\x15\xe8\xea\xad\xc0\x95\x2b\x60\x22\x30\x64\xa7\x9d\xc6\x9c\xb5\x9f\xc2\xd1\xc4\x60\xee\x41\x21\xa3\x64\x54\xdf\x4e\x50\x6d\x25\x59\xaf\x3d\x87\x4b\xf8\x91\xa4\xe3\x5d\x24\x5d\x4f\x2e\xf5\xa5\x3b\x0c\x83\x53\xf7\xe9\xe5\xbc\xb6\x7a\x1f\x5a\xc6\x4d\xb0\x7c\xf1\x74\xa9\x3d\x68\x5b\xf7\x1e\xa8\x72\x78\x54\xd6\xe3\x51\xfe\x95\x19\xe5\x49\x2f\x07\x9f\x4d\x82\xfe\x01\x36\x67\xcd\x8c\x79\xff\x91\x26\x67\x91\x23\x9a\xd5\x23\x7d\x3e\x75\xd1\x0a\xde\xc1\x78\x0b\xc9\x68\x9f\x06\xd2\xa8\xfc\x77\x0d\xed\x10\x3a\x37\xfc\xf7\x56\x5a\xe1\xd4\x09\x85\xea\x19\xb1\xf7\x2b\xf7\x0e\x72\x87\x01\x64\x57\xbd\x9f\x3e\x03\x25\x6b\xa3\x3f\x57\xb2\xee\x7a\x12\x2e\x51\xb8\x9f\x4b\x63\x5e\xcc\xa7\x15\xbb\x6a\xf4\xd2\x91\xf7\xa8\xe0\xf4\xe4\x75\x37\x2a\x16\x45\xf8\xa6\x85\xdb\xd2\x98\x18\xde\xdf\x15\xc2\x86\xef\xdd\xb0\xe4\xf0\x53\xa9\x1d\xaa\xf8\xf0\xa0\x7c\x99\x6f\xae\xfc\x40\x2a\x9d\x2c\x19\x7d\x5a\x7a\x54\x7d\x78\xf3\xd4\x7a\x3f\xf4\xae\xf8\xf4\xa4\xcd\xae\xc3\x97\xd7\x93\x37\x42\x43\xe1\xbc\x39\x4a\x66\xf9\x4d\x58\xbc\xed\xca\x42\xae\xf3\xa8\x70\x54\x33\x90\x45\x54\x7e\xf3\xe9\x15\x94\xac\x09\x1d\xba\x55\xed\x85\xe4\xed\xae\x48\xd6\xdd\xeb\xdf\x00\x00\x00\xff\xff\x97\x96\x20\x03\x63\x11\x00\x00")

func jsonnetManifestsCephPrometheusRulesYamlBytes() ([]byte, error) {
	return bindataRead(
		_jsonnetManifestsCephPrometheusRulesYaml,
		"jsonnet/manifests/ceph-prometheus-rules.yaml",
	)
}

func jsonnetManifestsCephPrometheusRulesYaml() (*asset, error) {
	bytes, err := jsonnetManifestsCephPrometheusRulesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jsonnet/manifests/ceph-prometheus-rules.yaml", size: 4451, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsonnetManifestsGlusterPrometheusRulesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\x4d\x6f\xda\x4c\x10\xc7\xef\x7c\x8a\x51\xf4\x3c\x52\x5b\x09\x02\x95\x2a\x91\x95\xe8\xa1\x4a\xd5\x53\xa5\xaa\x2f\xb9\xa2\xc1\x9e\xc0\x36\xeb\xdd\xd5\xee\x98\x84\x52\x7f\xf7\x6a\x6d\x2f\x35\x21\x4e\x30\x49\x1a\x7c\x82\xd5\xfc\x67\x66\x7f\xf3\x02\x46\x2b\x2f\xc8\x79\x69\xb4\x80\xcc\x68\xc9\xc6\x49\x3d\x1f\x24\xc6\x91\xf1\x83\xc4\x64\xa7\xcb\x51\xef\x4a\xea\x54\xc0\x17\x67\x32\xe2\x05\xe5\xfe\x6b\xae\xa8\x97\x11\x63\x8a\x8c\xa2\x07\xa0\x70\x46\xca\x87\x4f\x00\x76\x63\x26\xe0\x6a\xec\xcb\x33\x67\x14\x09\x40\x45\x8e\xfb\x2e\x57\x14\x4e\x35\x66\x24\x1a\xd6\xfd\xb9\xca\x3d\x93\xdb\x32\xf0\x16\x13\x12\x90\xd2\x25\xe6\x8a\x7b\xde\x52\x12\xa2\xcc\x9d\xc9\x6d\x19\xaf\x5f\xfb\xa1\x1b\x6b\x5c\x50\xe3\xcc\x93\xe6\x2a\x6a\x70\x54\x25\xd5\xaf\x82\x0b\xf8\x54\x05\xf9\x58\x9b\x9f\x9b\x6b\x5d\x1a\x00\xa0\xd6\x86\x91\xa5\xd1\xb5\x26\x3c\x19\x79\x8f\x73\xda\xd1\xc1\x02\x3d\xa4\xd2\xa3\xb5\x84\x8e\x52\xb8\x74\x26\x6b\x10\x02\x46\x37\x27\x0e\x26\x89\x59\x92\x5b\x0d\x6a\x97\x74\x63\x9d\x80\xdf\x9b\x00\x55\xba\xaf\x72\xbb\xfe\x69\x66\x93\x93\x9a\x41\xfa\xb6\x9f\x28\x49\x9a\x4f\x8a\xc9\x64\xf4\xba\xb6\xbe\x34\x4e\xc0\xe8\x5d\x56\x7f\x6d\x42\x0f\x8f\xa7\x25\x39\xc9\x2b\x01\x89\x93\x2c\x13\x54\x0d\x3e\x9e\x91\x73\xdf\x2f\x29\x0c\x22\xe1\x7b\x11\x7d\x70\x32\xb9\xfa\x56\xca\xba\x10\x82\x52\x07\xeb\xf5\x7f\x55\x7e\x83\x85\xf1\x1c\x72\x28\x0a\xf1\xf7\x70\x16\x8c\xa6\x16\x79\x51\x14\x20\x3d\xa4\xe6\x5a\xb7\x21\xaa\x99\x4c\x2b\x4d\x3b\x29\x98\x4c\x60\xb8\x85\xaa\x13\xa9\x5d\x02\x17\x46\xe5\x19\x1d\x80\xa0\x12\x36\x18\x2c\xcb\x83\xfd\xaf\x5a\xd9\x3f\xdf\x5d\x63\x57\xc4\x91\xcb\x59\x2a\xf9\xab\xbc\xd7\x43\x6d\x51\xdd\xed\xc7\x2d\xc1\xe3\xc9\x34\x3c\x42\x66\x1c\x01\x2f\x50\xc3\x78\xf8\x7f\x0b\xaa\xd1\x70\x08\x6f\xe2\x05\x44\x0d\x2c\x41\x8b\x89\xe4\xd5\x34\xf7\x94\x4e\x67\x2b\x26\x3f\x65\xc3\xa8\x84\xcf\xb3\x8d\x34\x3c\xa7\xad\xd2\xd2\xbe\xd2\x06\x15\xbc\x87\xf1\x16\xe9\x3d\xe6\xef\x1a\x9d\x96\x7a\x7e\x04\xfc\xce\x8e\x81\xdf\x59\x57\x7e\xf7\x4e\x65\xb9\x5f\x0e\xe5\x77\xd7\x72\x6a\x5f\x4c\xbb\x51\x4a\xa7\x5d\xbb\xb3\xde\x5c\x77\xc0\x6d\x1b\xef\xbb\x51\xdf\xf6\xd3\xa8\x4f\xeb\x9e\x78\xe2\xee\x3d\x22\xf8\x7b\xb6\xf6\xcb\xc2\x7f\x4c\xeb\xc7\x25\xcd\x0b\xa9\xad\x31\xaa\xcb\x96\xfe\x5e\x6b\xce\x91\xf1\xd0\x72\x45\x1f\xb0\x5e\x43\xac\x50\xcc\x65\x1a\x52\x83\xa2\x80\x10\x60\x67\xf7\x34\x08\x3e\x30\x27\x11\xee\xc6\x6f\xf8\x47\xb9\x47\x8d\x1a\x75\xd9\x96\x36\xb6\xcf\x3d\x65\x19\x0e\xc6\x4f\x38\x14\xc7\x05\xbb\x7d\x2e\x5e\x0c\xf6\xd9\x53\xee\xff\x48\xea\x73\xfd\xfe\xf1\xac\xc4\x63\x90\x47\xfc\x14\xec\xa0\x8b\x2f\x4e\x07\x92\xdf\xc8\x5f\xb2\xd5\x8f\x0b\x7e\x87\x96\xff\xd7\xf0\x0f\x6e\xfd\x3f\x01\x00\x00\xff\xff\x63\x35\x6e\x54\x99\x0f\x00\x00")

func jsonnetManifestsGlusterPrometheusRulesYamlBytes() ([]byte, error) {
	return bindataRead(
		_jsonnetManifestsGlusterPrometheusRulesYaml,
		"jsonnet/manifests/gluster-prometheus-rules.yaml",
	)
}

func jsonnetManifestsGlusterPrometheusRulesYaml() (*asset, error) {
	bytes, err := jsonnetManifestsGlusterPrometheusRulesYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "jsonnet/manifests/gluster-prometheus-rules.yaml", size: 3993, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"jsonnet/manifests/ceph-prometheus-rules.yaml": jsonnetManifestsCephPrometheusRulesYaml,
	"jsonnet/manifests/gluster-prometheus-rules.yaml": jsonnetManifestsGlusterPrometheusRulesYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"jsonnet": &bintree{nil, map[string]*bintree{
		"manifests": &bintree{nil, map[string]*bintree{
			"ceph-prometheus-rules.yaml": &bintree{jsonnetManifestsCephPrometheusRulesYaml, map[string]*bintree{}},
			"gluster-prometheus-rules.yaml": &bintree{jsonnetManifestsGlusterPrometheusRulesYaml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

